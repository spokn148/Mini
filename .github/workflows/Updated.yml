name: Windows RDP V5

on:
  workflow_dispatch:

concurrency:
  group: tailscale-rdp-singleton
  cancel-in-progress: false

permissions:
  contents: read
  actions: write

defaults:
  run:
    shell: pwsh

env:
  RDP_USER: runneradmin
  RDP_PASS: TK#12345
  TS_HOSTNAME: bullet

jobs:
  rdp:
    runs-on: windows-2022
    timeout-minutes: 370
    steps:

      # ===================== Install Tailscale =====================
      - name: ‚öôÔ∏è Install Tailscale
        run: |
          $exe = "C:\Program Files\Tailscale\tailscale.exe"
          if (-not (Test-Path $exe)) {
            $url = 'https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe'
            $dst = "$env:TEMP\tailscale-setup.exe"
            Invoke-WebRequest -Uri $url -OutFile $dst -UseBasicParsing
            Start-Process -FilePath $dst -ArgumentList "/quiet" -Wait
          }
          Start-Service Tailscale -ErrorAction SilentlyContinue
          & "C:\Program Files\Tailscale\tailscale.exe" version

      # ===================== Setup RDP =====================
      - name: üîê Setup RDP
        run: |
          $u="${{ env.RDP_USER }}"; $p="${{ env.RDP_PASS }}"
          $sec = ConvertTo-SecureString $p -AsPlainText -Force
          Set-LocalUser -Name $u -Password $sec -AccountNeverExpires
          Enable-LocalUser -Name $u
          Add-LocalGroupMember -Group Administrators -Member $u -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $u -ErrorAction SilentlyContinue
          Set-ItemProperty "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name fDenyTSConnections -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop" | Out-Null

      # ===================== Tailscale up (hardcoded keys) =====================
      - name: üîó Tailscale up
        run: |
          $ts = "C:\Program Files\Tailscale\tailscale.exe"
          & $ts logout | Out-Null
          & $ts up --authkey "tskey-auth-kik8wxNiZt11CNTRL-ZmAarzeMiUYiQvDiEYBbUYv7Sbyi5RmTZ" --hostname "bullet" --accept-routes --accept-dns=false
          Start-Sleep -Seconds 2
          $ip4 = (& $ts ip -4 | Select-Object -First 1)
          Write-Host "### RDP Info ###"
          Write-Host "User: runneradmin"
          Write-Host "Pass: TK#12345"
          Write-Host "Host: bullet"
          Write-Host "IP: $ip4"

      # ===================== Install ZeroTier =====================
      - name: üåê Install ZeroTier
        run: |
          $ztExe = "C:\ProgramData\ZeroTier\One\zerotier-one_x64.exe"
          if (-not (Test-Path $ztExe)) {
            Write-Host "Downloading ZeroTier..."
            $url = "https://download.zerotier.com/dist/ZeroTierOne.msi"
            $msi = "$env:TEMP\ZeroTierOne.msi"
            Invoke-WebRequest -Uri $url -OutFile $msi -UseBasicParsing
            Start-Process msiexec.exe -ArgumentList "/i `"$msi`" /quiet /qn /norestart" -Wait
          }
          Start-Process -FilePath $ztExe -ArgumentList "-C" -WindowStyle Hidden
          Start-Sleep -Seconds 5
          & $ztExe -q join 4753cf475fd1d946
          & $ztExe -q listnetworks

      # ===================== Download & Extract Firefox Portable (FAST) =====================
      - name: üì• Download & Extract Firefox Portable
        run: |
          $zip  = "$env:TEMP\FirefoxPortable.zip"
          $dst  = "C:\Users\runneradmin\Downloads\FirefoxPortable"
          if (Test-Path $dst) { Remove-Item -Recurse -Force $dst }
          if (Test-Path $zip) { Remove-Item -Force $zip }
          Invoke-WebRequest -Uri "https://www.dropbox.com/scl/fo/9n644cwuq4gpw6123dpph/AJvMFsxMkDWK_0FYWDjzJE8?rlkey=i6k3lpcz6t5k0pfaf7h6co8g2&dl=1" -OutFile $zip -UseBasicParsing
          Expand-Archive -Path $zip -DestinationPath $dst -Force
          Write-Host "‚úÖ Firefox Portable extracted to $dst"

      # ===================== Launch Firefox Portable via BAT (3 cores + BelowNormal) =====================
      - name: üöÄ Launch Firefox Portable via BAT (fix parser error)
        shell: pwsh
        run: |
          $ffDir  = "C:\Users\runneradmin\Downloads\FirefoxPortable"
          $ffExe  = Join-Path $ffDir "FirefoxPortable.exe"
          $batPath = Join-Path $ffDir "LaunchFirefox.bat"

          if (-not (Test-Path $ffExe)) {
            Write-Error "FirefoxPortable.exe not found at $ffExe"
            exit 1
          }

          # Create a BAT file that uses cmd's start /affinity (no PowerShell quoting headaches).
          # %~dp0 points to the folder containing the BAT, so it runs the local exe.
          $batContent = @'
    @echo off
 REM Launch Firefox Portable on 3 cores (affinity mask 7 = cores 0,1,2)
REM Use -no-remote -new-instance to ensure a separate instance
start "" /affinity 7 "%~dp0FirefoxPortable.exe" -no-remote -new-instance
'@

          # Write BAT as ASCII (cmd expects plain ASCII)
          $batContent | Set-Content -LiteralPath $batPath -Encoding ASCII

          # Execute the BAT via cmd (use /c to run and exit)
          Start-Process -FilePath "cmd.exe" -ArgumentList "/c", $batPath -WindowStyle Hidden

          # Give the process some time to spawn main + children
          Start-Sleep -Seconds 3

          # Try repeatedly for a short window to set BelowNormal priority & affinity
          $deadline = (Get-Date).AddSeconds(20)
          while ((Get-Date) -lt $deadline) {
            $procs = Get-Process -Name "FirefoxPortable","firefox" -ErrorAction SilentlyContinue
            if ($procs) {
              foreach ($p in $procs) {
                try { $p.PriorityClass = [System.Diagnostics.ProcessPriorityClass]::BelowNormal } catch {}
                try { $p.ProcessorAffinity = 7 } catch {}
              }
              Write-Host "Applied BelowNormal priority + affinity to $($procs.Count) firefox processes."
              break
            }
            Start-Sleep -Milliseconds 500
          }

          # Final pass to be sure
          $all = Get-Process -Name "FirefoxPortable","firefox" -ErrorAction SilentlyContinue
          if ($all) {
            foreach ($p in $all) {
              try { $p.PriorityClass = [System.Diagnostics.ProcessPriorityClass]::BelowNormal } catch {}
              try { $p.ProcessorAffinity = 7 } catch {}
            }
            Write-Host "Final pass applied to $($all.Count) firefox processes."
          } else {
            Write-Warning "No firefox processes found to adjust after launch."
          }

      # ===================== Keep Alive =====================
      - name: ‚è≥ Keep alive
        run: |
          $end=(Get-Date).AddMinutes(355)
          while((Get-Date) -lt $end){
            $left=[int]([math]::Ceiling(($end-(Get-Date)).TotalMinutes))
            Write-Host "RDP alive... ($left min left)"
            Start-Sleep -Seconds 60
          }
